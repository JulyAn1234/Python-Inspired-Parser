

Terminals which are not used:

   COMMA
   UNDEFINED



Grammar
rule 1    function_behavior ->		/* empty */
rule 2    function_behavior -> function_behavior_alpha function_behavior
rule 3    function_behavior_alpha -> function_line
rule 4    function_behavior_alpha -> if_statement
rule 5    function_behavior_alpha -> loop
rule 6    loop_init -> WHILE bool_expression COLON
rule 7    loop -> loop_init function_behavior END
rule 8    if_init -> IF bool_expression COLON
rule 9    if_statement -> if_init function_behavior END
rule 10   function_line -> function_line_alpha SEMI_COLON
rule 11   function_line_alpha ->		/* empty */
rule 12   function_line_alpha -> var_assign
rule 13   function_line_alpha -> var_init
rule 14   function_line_alpha -> method_call
rule 15   var_init -> TYPE ID
rule 16   var_assign -> ID ASSIGN expression
rule 17   method_call -> READ LEFT_GROUP ID RIGHT_GROUP
rule 18   method_call -> WRITE LEFT_GROUP write_parameter RIGHT_GROUP
rule 19   write_parameter -> STRING
rule 20   write_parameter -> ID
rule 21   expression -> STRING
rule 22   expression -> numerical_expression
rule 23   expression -> BOOL
rule 24   numerical_expression -> term numerical_expression_prime
rule 25   numerical_expression_prime ->		/* empty */
rule 26   numerical_expression_prime -> SUM term numerical_expression_prime
rule 27   numerical_expression_prime -> MINUS term numerical_expression_prime
rule 28   term -> factor term_prime
rule 29   term_prime ->		/* empty */
rule 30   term_prime -> MULT factor term_prime
rule 31   term_prime -> DIV factor term_prime
rule 32   factor -> ID
rule 33   factor -> INTEGER
rule 34   factor -> FLOATING
rule 35   factor -> LEFT_GROUP numerical_expression RIGHT_GROUP
rule 36   bool_expression -> rel_expression
rule 37   bool_expression -> BOOL
rule 38   bool_expression -> ID
rule 39   rel_expression -> numerical_expression REL_OP numerical_expression

Terminals, with rules where they appear

$ (-1)
error (256)
READ (258) 17
WRITE (259) 18
WHILE (260) 6
IF (261) 8
TYPE (262) 15
BOOL (263) 23 37
END (264) 7 9
SUM (265) 26
MINUS (266) 27
DIV (267) 31
MULT (268) 30
REL_OP (269) 39
ASSIGN (270) 16
SEMI_COLON (271) 10
COLON (272) 6 8
COMMA (273)
LEFT_GROUP (274) 17 18 35
RIGHT_GROUP (275) 17 18 35
STRING (276) 19 21
ID (277) 15 16 17 20 32 38
FLOATING (278) 34
INTEGER (279) 33
UNDEFINED (280)

Nonterminals, with rules where they appear

function_behavior (26)
    on left: 1 2, on right: 2 7 9
function_behavior_alpha (27)
    on left: 3 4 5, on right: 2
loop_init (28)
    on left: 6, on right: 7
loop (29)
    on left: 7, on right: 5
if_init (30)
    on left: 8, on right: 9
if_statement (31)
    on left: 9, on right: 4
function_line (32)
    on left: 10, on right: 3
function_line_alpha (33)
    on left: 11 12 13 14, on right: 10
var_init (34)
    on left: 15, on right: 13
var_assign (35)
    on left: 16, on right: 12
method_call (36)
    on left: 17 18, on right: 14
write_parameter (37)
    on left: 19 20, on right: 18
expression (38)
    on left: 21 22 23, on right: 16
numerical_expression (39)
    on left: 24, on right: 22 35 39
numerical_expression_prime (40)
    on left: 25 26 27, on right: 24 26 27
term (41)
    on left: 28, on right: 24 26 27
term_prime (42)
    on left: 29 30 31, on right: 28 30 31
factor (43)
    on left: 32 33 34 35, on right: 28 30 31
bool_expression (44)
    on left: 36 37 38, on right: 6 8
rel_expression (45)
    on left: 39, on right: 36


state 0

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    WHILE	shift, and go to state 3
    IF  	shift, and go to state 4
    TYPE	shift, and go to state 5
    ID  	shift, and go to state 6

    SEMI_COLON	reduce using rule 11 (function_line_alpha)
    $default	reduce using rule 1 (function_behavior)

    function_behavior	go to state 69
    function_behavior_alpha	go to state 7
    loop_init	go to state 8
    loop	go to state 9
    if_init	go to state 10
    if_statement	go to state 11
    function_line	go to state 12
    function_line_alpha	go to state 13
    var_init	go to state 14
    var_assign	go to state 15
    method_call	go to state 16



state 1

    method_call  ->  READ . LEFT_GROUP ID RIGHT_GROUP   (rule 17)

    LEFT_GROUP	shift, and go to state 17



state 2

    method_call  ->  WRITE . LEFT_GROUP write_parameter RIGHT_GROUP   (rule 18)

    LEFT_GROUP	shift, and go to state 18



state 3

    loop_init  ->  WHILE . bool_expression COLON   (rule 6)

    BOOL	shift, and go to state 19
    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 21
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    numerical_expression	go to state 24
    term	go to state 25
    factor	go to state 26
    bool_expression	go to state 27
    rel_expression	go to state 28



state 4

    if_init  ->  IF . bool_expression COLON   (rule 8)

    BOOL	shift, and go to state 19
    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 21
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    numerical_expression	go to state 24
    term	go to state 25
    factor	go to state 26
    bool_expression	go to state 29
    rel_expression	go to state 28



state 5

    var_init  ->  TYPE . ID   (rule 15)

    ID  	shift, and go to state 30



state 6

    var_assign  ->  ID . ASSIGN expression   (rule 16)

    ASSIGN	shift, and go to state 31



state 7

    function_behavior  ->  function_behavior_alpha . function_behavior   (rule 2)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    WHILE	shift, and go to state 3
    IF  	shift, and go to state 4
    TYPE	shift, and go to state 5
    ID  	shift, and go to state 6

    SEMI_COLON	reduce using rule 11 (function_line_alpha)
    $default	reduce using rule 1 (function_behavior)

    function_behavior	go to state 32
    function_behavior_alpha	go to state 7
    loop_init	go to state 8
    loop	go to state 9
    if_init	go to state 10
    if_statement	go to state 11
    function_line	go to state 12
    function_line_alpha	go to state 13
    var_init	go to state 14
    var_assign	go to state 15
    method_call	go to state 16



state 8

    loop  ->  loop_init . function_behavior END   (rule 7)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    WHILE	shift, and go to state 3
    IF  	shift, and go to state 4
    TYPE	shift, and go to state 5
    ID  	shift, and go to state 6

    SEMI_COLON	reduce using rule 11 (function_line_alpha)
    $default	reduce using rule 1 (function_behavior)

    function_behavior	go to state 33
    function_behavior_alpha	go to state 7
    loop_init	go to state 8
    loop	go to state 9
    if_init	go to state 10
    if_statement	go to state 11
    function_line	go to state 12
    function_line_alpha	go to state 13
    var_init	go to state 14
    var_assign	go to state 15
    method_call	go to state 16



state 9

    function_behavior_alpha  ->  loop .   (rule 5)

    $default	reduce using rule 5 (function_behavior_alpha)



state 10

    if_statement  ->  if_init . function_behavior END   (rule 9)

    READ	shift, and go to state 1
    WRITE	shift, and go to state 2
    WHILE	shift, and go to state 3
    IF  	shift, and go to state 4
    TYPE	shift, and go to state 5
    ID  	shift, and go to state 6

    SEMI_COLON	reduce using rule 11 (function_line_alpha)
    $default	reduce using rule 1 (function_behavior)

    function_behavior	go to state 34
    function_behavior_alpha	go to state 7
    loop_init	go to state 8
    loop	go to state 9
    if_init	go to state 10
    if_statement	go to state 11
    function_line	go to state 12
    function_line_alpha	go to state 13
    var_init	go to state 14
    var_assign	go to state 15
    method_call	go to state 16



state 11

    function_behavior_alpha  ->  if_statement .   (rule 4)

    $default	reduce using rule 4 (function_behavior_alpha)



state 12

    function_behavior_alpha  ->  function_line .   (rule 3)

    $default	reduce using rule 3 (function_behavior_alpha)



state 13

    function_line  ->  function_line_alpha . SEMI_COLON   (rule 10)

    SEMI_COLON	shift, and go to state 35



state 14

    function_line_alpha  ->  var_init .   (rule 13)

    $default	reduce using rule 13 (function_line_alpha)



state 15

    function_line_alpha  ->  var_assign .   (rule 12)

    $default	reduce using rule 12 (function_line_alpha)



state 16

    function_line_alpha  ->  method_call .   (rule 14)

    $default	reduce using rule 14 (function_line_alpha)



state 17

    method_call  ->  READ LEFT_GROUP . ID RIGHT_GROUP   (rule 17)

    ID  	shift, and go to state 36



state 18

    method_call  ->  WRITE LEFT_GROUP . write_parameter RIGHT_GROUP   (rule 18)

    STRING	shift, and go to state 37
    ID  	shift, and go to state 38

    write_parameter	go to state 39



state 19

    bool_expression  ->  BOOL .   (rule 37)

    $default	reduce using rule 37 (bool_expression)



state 20

    factor  ->  LEFT_GROUP . numerical_expression RIGHT_GROUP   (rule 35)

    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    numerical_expression	go to state 41
    term	go to state 25
    factor	go to state 26



state 21

    factor  ->  ID .   (rule 32)
    bool_expression  ->  ID .   (rule 38)

    COLON	reduce using rule 38 (bool_expression)
    $default	reduce using rule 32 (factor)



state 22

    factor  ->  FLOATING .   (rule 34)

    $default	reduce using rule 34 (factor)



state 23

    factor  ->  INTEGER .   (rule 33)

    $default	reduce using rule 33 (factor)



state 24

    rel_expression  ->  numerical_expression . REL_OP numerical_expression   (rule 39)

    REL_OP	shift, and go to state 42



state 25

    numerical_expression  ->  term . numerical_expression_prime   (rule 24)

    SUM 	shift, and go to state 43
    MINUS	shift, and go to state 44

    $default	reduce using rule 25 (numerical_expression_prime)

    numerical_expression_prime	go to state 45



state 26

    term  ->  factor . term_prime   (rule 28)

    DIV 	shift, and go to state 46
    MULT	shift, and go to state 47

    $default	reduce using rule 29 (term_prime)

    term_prime	go to state 48



state 27

    loop_init  ->  WHILE bool_expression . COLON   (rule 6)

    COLON	shift, and go to state 49



state 28

    bool_expression  ->  rel_expression .   (rule 36)

    $default	reduce using rule 36 (bool_expression)



state 29

    if_init  ->  IF bool_expression . COLON   (rule 8)

    COLON	shift, and go to state 50



state 30

    var_init  ->  TYPE ID .   (rule 15)

    $default	reduce using rule 15 (var_init)



state 31

    var_assign  ->  ID ASSIGN . expression   (rule 16)

    BOOL	shift, and go to state 51
    LEFT_GROUP	shift, and go to state 20
    STRING	shift, and go to state 52
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    expression	go to state 53
    numerical_expression	go to state 54
    term	go to state 25
    factor	go to state 26



state 32

    function_behavior  ->  function_behavior_alpha function_behavior .   (rule 2)

    $default	reduce using rule 2 (function_behavior)



state 33

    loop  ->  loop_init function_behavior . END   (rule 7)

    END 	shift, and go to state 55



state 34

    if_statement  ->  if_init function_behavior . END   (rule 9)

    END 	shift, and go to state 56



state 35

    function_line  ->  function_line_alpha SEMI_COLON .   (rule 10)

    $default	reduce using rule 10 (function_line)



state 36

    method_call  ->  READ LEFT_GROUP ID . RIGHT_GROUP   (rule 17)

    RIGHT_GROUP	shift, and go to state 57



state 37

    write_parameter  ->  STRING .   (rule 19)

    $default	reduce using rule 19 (write_parameter)



state 38

    write_parameter  ->  ID .   (rule 20)

    $default	reduce using rule 20 (write_parameter)



state 39

    method_call  ->  WRITE LEFT_GROUP write_parameter . RIGHT_GROUP   (rule 18)

    RIGHT_GROUP	shift, and go to state 58



state 40

    factor  ->  ID .   (rule 32)

    $default	reduce using rule 32 (factor)



state 41

    factor  ->  LEFT_GROUP numerical_expression . RIGHT_GROUP   (rule 35)

    RIGHT_GROUP	shift, and go to state 59



state 42

    rel_expression  ->  numerical_expression REL_OP . numerical_expression   (rule 39)

    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    numerical_expression	go to state 60
    term	go to state 25
    factor	go to state 26



state 43

    numerical_expression_prime  ->  SUM . term numerical_expression_prime   (rule 26)

    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    term	go to state 61
    factor	go to state 26



state 44

    numerical_expression_prime  ->  MINUS . term numerical_expression_prime   (rule 27)

    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    term	go to state 62
    factor	go to state 26



state 45

    numerical_expression  ->  term numerical_expression_prime .   (rule 24)

    $default	reduce using rule 24 (numerical_expression)



state 46

    term_prime  ->  DIV . factor term_prime   (rule 31)

    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    factor	go to state 63



state 47

    term_prime  ->  MULT . factor term_prime   (rule 30)

    LEFT_GROUP	shift, and go to state 20
    ID  	shift, and go to state 40
    FLOATING	shift, and go to state 22
    INTEGER	shift, and go to state 23

    factor	go to state 64



state 48

    term  ->  factor term_prime .   (rule 28)

    $default	reduce using rule 28 (term)



state 49

    loop_init  ->  WHILE bool_expression COLON .   (rule 6)

    $default	reduce using rule 6 (loop_init)



state 50

    if_init  ->  IF bool_expression COLON .   (rule 8)

    $default	reduce using rule 8 (if_init)



state 51

    expression  ->  BOOL .   (rule 23)

    $default	reduce using rule 23 (expression)



state 52

    expression  ->  STRING .   (rule 21)

    $default	reduce using rule 21 (expression)



state 53

    var_assign  ->  ID ASSIGN expression .   (rule 16)

    $default	reduce using rule 16 (var_assign)



state 54

    expression  ->  numerical_expression .   (rule 22)

    $default	reduce using rule 22 (expression)



state 55

    loop  ->  loop_init function_behavior END .   (rule 7)

    $default	reduce using rule 7 (loop)



state 56

    if_statement  ->  if_init function_behavior END .   (rule 9)

    $default	reduce using rule 9 (if_statement)



state 57

    method_call  ->  READ LEFT_GROUP ID RIGHT_GROUP .   (rule 17)

    $default	reduce using rule 17 (method_call)



state 58

    method_call  ->  WRITE LEFT_GROUP write_parameter RIGHT_GROUP .   (rule 18)

    $default	reduce using rule 18 (method_call)



state 59

    factor  ->  LEFT_GROUP numerical_expression RIGHT_GROUP .   (rule 35)

    $default	reduce using rule 35 (factor)



state 60

    rel_expression  ->  numerical_expression REL_OP numerical_expression .   (rule 39)

    $default	reduce using rule 39 (rel_expression)



state 61

    numerical_expression_prime  ->  SUM term . numerical_expression_prime   (rule 26)

    SUM 	shift, and go to state 43
    MINUS	shift, and go to state 44

    $default	reduce using rule 25 (numerical_expression_prime)

    numerical_expression_prime	go to state 65



state 62

    numerical_expression_prime  ->  MINUS term . numerical_expression_prime   (rule 27)

    SUM 	shift, and go to state 43
    MINUS	shift, and go to state 44

    $default	reduce using rule 25 (numerical_expression_prime)

    numerical_expression_prime	go to state 66



state 63

    term_prime  ->  DIV factor . term_prime   (rule 31)

    DIV 	shift, and go to state 46
    MULT	shift, and go to state 47

    $default	reduce using rule 29 (term_prime)

    term_prime	go to state 67



state 64

    term_prime  ->  MULT factor . term_prime   (rule 30)

    DIV 	shift, and go to state 46
    MULT	shift, and go to state 47

    $default	reduce using rule 29 (term_prime)

    term_prime	go to state 68



state 65

    numerical_expression_prime  ->  SUM term numerical_expression_prime .   (rule 26)

    $default	reduce using rule 26 (numerical_expression_prime)



state 66

    numerical_expression_prime  ->  MINUS term numerical_expression_prime .   (rule 27)

    $default	reduce using rule 27 (numerical_expression_prime)



state 67

    term_prime  ->  DIV factor term_prime .   (rule 31)

    $default	reduce using rule 31 (term_prime)



state 68

    term_prime  ->  MULT factor term_prime .   (rule 30)

    $default	reduce using rule 30 (term_prime)



state 69

    $   	go to state 70



state 70

    $   	go to state 71



state 71

    $default	accept
